# Patch 5: Sentry 整合測試

## 新增檔案: apps/ratewise/src/utils/sentry.test.ts

```typescript
import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
import * as Sentry from '@sentry/react';
import { initSentry } from './sentry';

// Mock @sentry/react
vi.mock('@sentry/react', () => ({
  init: vi.fn(),
  captureException: vi.fn(),
  captureMessage: vi.fn(),
  addBreadcrumb: vi.fn(),
}));

describe('Sentry Integration', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  afterEach(() => {
    vi.unstubAllEnvs();
  });

  describe('initSentry', () => {
    it('should initialize Sentry when DSN is provided', () => {
      // Arrange
      vi.stubEnv('VITE_SENTRY_DSN', 'https://test@sentry.io/123');
      vi.stubEnv('VITE_SENTRY_ENVIRONMENT', 'test');
      vi.stubEnv('VITE_APP_VERSION', '1.0.0');

      // Act
      initSentry();

      // Assert
      expect(Sentry.init).toHaveBeenCalledWith({
        dsn: 'https://test@sentry.io/123',
        environment: 'test',
        release: '1.0.0',
        tracesSampleRate: expect.any(Number),
        replaysSessionSampleRate: expect.any(Number),
        replaysOnErrorSampleRate: 1.0,
      });
    });

    it('should not initialize when DSN is missing', () => {
      // Arrange
      vi.unstubAllEnvs();
      const consoleWarnSpy = vi.spyOn(console, 'warn').mockImplementation(() => {});

      // Act
      initSentry();

      // Assert
      expect(Sentry.init).not.toHaveBeenCalled();
      expect(consoleWarnSpy).toHaveBeenCalledWith('Sentry DSN not configured');

      consoleWarnSpy.mockRestore();
    });

    it('should use default environment when not specified', () => {
      // Arrange
      vi.stubEnv('VITE_SENTRY_DSN', 'https://test@sentry.io/123');

      // Act
      initSentry();

      // Assert
      expect(Sentry.init).toHaveBeenCalledWith(
        expect.objectContaining({
          environment: 'development',
        })
      );
    });

    it('should use correct sample rates', () => {
      // Arrange
      vi.stubEnv('VITE_SENTRY_DSN', 'https://test@sentry.io/123');

      // Act
      initSentry();

      // Assert
      const initCall = (Sentry.init as vi.Mock).mock.calls[0][0];
      
      expect(initCall.tracesSampleRate).toBe(0.1);  // 10% traces
      expect(initCall.replaysSessionSampleRate).toBe(0.1);  // 10% sessions
      expect(initCall.replaysOnErrorSampleRate).toBe(1.0);  // 100% on errors
    });
  });

  describe('Sentry in production', () => {
    it('should capture exceptions correctly', () => {
      // Arrange
      const testError = new Error('Test error');

      // Act
      Sentry.captureException(testError, {
        extra: { context: 'test' },
      });

      // Assert
      expect(Sentry.captureException).toHaveBeenCalledWith(
        testError,
        expect.objectContaining({
          extra: { context: 'test' },
        })
      );
    });

    it('should add breadcrumbs correctly', () => {
      // Act
      Sentry.addBreadcrumb({
        message: 'User action',
        level: 'info',
        data: { userId: '123' },
      });

      // Assert
      expect(Sentry.addBreadcrumb).toHaveBeenCalledWith({
        message: 'User action',
        level: 'info',
        data: { userId: '123' },
      });
    });
  });
});
```

## 執行測試

```bash
cd apps/ratewise
pnpm test sentry.test.ts --coverage
```

## 預期結果

```
✓ src/utils/sentry.test.ts (8)
  ✓ Sentry Integration (8)
    ✓ initSentry (4)
      ✓ should initialize Sentry when DSN is provided
      ✓ should not initialize when DSN is missing
      ✓ should use default environment when not specified
      ✓ should use correct sample rates
    ✓ Sentry in production (2)
      ✓ should capture exceptions correctly
      ✓ should add breadcrumbs correctly

Coverage:
  File: src/utils/sentry.ts
  Lines: 85%+
  Functions: 80%+
  Branches: 80%+
```

## 相關 Issue

- TECH_DEBT_AUDIT.md § 風險 #1
- REFACTOR_PLAN.md § M1.1

