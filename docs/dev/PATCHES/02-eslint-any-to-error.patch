# Patch 2: ESLint `any` 與 `!` 規則強化為 error

## 檔案: eslint.config.js

### Before

```javascript
    rules: {
      // ... 其他規則 ...

      // TypeScript 特定規則調整
      '@typescript-eslint/no-unused-vars': [
        'error',
        {
          argsIgnorePattern: '^_',
          varsIgnorePattern: '^_',
        },
      ],
      '@typescript-eslint/consistent-type-imports': [
        'warn',
        {
          prefer: 'type-imports',
          fixStyle: 'inline-type-imports',
        },
      ],

      // 放寬某些規則以符合專案需求
      '@typescript-eslint/no-explicit-any': 'warn',  // ❌ 過於寬鬆
      '@typescript-eslint/no-non-null-assertion': 'warn',  // ❌ 過於寬鬆
      '@typescript-eslint/prefer-nullish-coalescing': 'warn',
      '@typescript-eslint/no-floating-promises': 'error',
      '@typescript-eslint/no-inferrable-types': 'error',
    },
```

### After

```javascript
    rules: {
      // ... 其他規則 ...

      // TypeScript 特定規則調整
      '@typescript-eslint/no-unused-vars': [
        'error',
        {
          argsIgnorePattern: '^_',
          varsIgnorePattern: '^_',
        },
      ],
      '@typescript-eslint/consistent-type-imports': [
        'warn',
        {
          prefer: 'type-imports',
          fixStyle: 'inline-type-imports',
        },
      ],

      // 強化型別安全
      '@typescript-eslint/no-explicit-any': 'error',  // ✅ 禁止 any
      '@typescript-eslint/no-non-null-assertion': 'error',  // ✅ 禁止 !
      '@typescript-eslint/prefer-nullish-coalescing': 'warn',
      '@typescript-eslint/no-floating-promises': 'error',
      '@typescript-eslint/no-inferrable-types': 'error',

      // 新增：循環複雜度檢查
      'complexity': ['error', { max: 10 }],  // ✅ 上限 10
      'max-depth': ['error', { max: 3 }],     // ✅ 巢狀深度上限 3
    },
```

### 驗證指令

```bash
pnpm lint

# 若有錯誤，逐一修正：
# 1. any → 具體型別
# 2. value! → value ?? fallback 或 if (value)
```

### 常見修正範例

#### any 修正

```typescript
// ❌ Before
function processData(data: any) {
  return data.value;
}

// ✅ After
interface Data {
  value: string;
}

function processData(data: Data) {
  return data.value;
}
```

#### Non-null assertion 修正

```typescript
// ❌ Before
const value = array.find(x => x.id === id)!;

// ✅ After
const value = array.find(x => x.id === id);
if (!value) throw new Error('Value not found');
```

### 相關 Issue

- TECH_DEBT_AUDIT.md § 1.2
- REFACTOR_PLAN.md § M0.4

