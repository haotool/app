# 匯率更新策略 - 保留 30 天歷史資料
#
# 特點：
# ✅ 開源專案 GitHub Actions 完全免費（無限分鐘數）
# ✅ main 分支完全乾淨（使用獨立 data 分支）
# ✅ 累積 30 天歷史資料（支援未來趨勢圖）
# ✅ 完全自動化（無需人工介入）
#
# 資料結構：
# public/rates/
#   ├── latest.json          # 最新匯率（供 CDN 使用）
#   └── history/
#       ├── 2025-10-13.json  # 每日歷史資料
#       ├── 2025-10-12.json
#       └── ...              # 最多保留 30 天

name: Update Exchange Rates with History

# 郵件通知策略：只在失敗時通知，成功不發郵件
# GitHub Settings > Notifications > Actions > "Send notifications for failed workflows only"

on:
  schedule:
    # 每 30 分鐘執行一次
    - cron: '0,30 * * * *'

  # 允許手動觸發
  workflow_dispatch:

  # 測試用：當腳本被修改時執行
  push:
    paths:
      - 'scripts/fetch-taiwan-bank-rates.js'
      - '.github/workflows/update-exchange-rates-historical.yml'

jobs:
  update-rates:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout data branch
        uses: actions/checkout@v4
        with:
          ref: data
          fetch-depth: 0
        continue-on-error: true

      - name: Create data branch if not exists
        if: failure()
        run: |
          git checkout -b data main
          git push -u origin data
          git checkout data

      - name: Ensure data branch is up to date with scripts
        run: |
          # 確保有最新的腳本
          git fetch origin main
          git checkout origin/main -- scripts/fetch-taiwan-bank-rates.js
          git checkout origin/main -- public/rates/ || mkdir -p public/rates/history

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Fetch Taiwan Bank exchange rates
        run: |
          echo "🔄 Fetching exchange rates from Taiwan Bank..."
          node scripts/fetch-taiwan-bank-rates.js

      - name: Check for changes in latest.json
        id: git-check
        run: |
          git diff --quiet public/rates/latest.json || echo "changed=true" >> $GITHUB_OUTPUT

      - name: Save historical data and cleanup old files
        if: steps.git-check.outputs.changed == 'true'
        run: |
          # 建立 history 目錄
          mkdir -p public/rates/history

          # 取得當前日期（台北時區）
          CURRENT_DATE=$(TZ=Asia/Taipei date +%Y-%m-%d)
          CURRENT_DATETIME=$(TZ=Asia/Taipei date +"%Y-%m-%d %H:%M:%S")

          # 複製最新資料到歷史檔案（每天一個檔案）
          HISTORY_FILE="public/rates/history/${CURRENT_DATE}.json"

          # 只在每天首次更新時建立歷史檔案
          if [ ! -f "$HISTORY_FILE" ]; then
            echo "📅 Creating daily history file: ${HISTORY_FILE}"
            cp public/rates/latest.json "$HISTORY_FILE"
          else
            echo "♻️ Updating existing daily file: ${HISTORY_FILE}"
            cp public/rates/latest.json "$HISTORY_FILE"
          fi

          # 清理超過 30 天的歷史資料
          echo "🗑️ Cleaning up files older than 30 days..."
          find public/rates/history/ -name "*.json" -type f -mtime +30 -delete

          # 統計保留的歷史檔案數量
          HISTORY_COUNT=$(ls -1 public/rates/history/*.json 2>/dev/null | wc -l)
          echo "history_count=${HISTORY_COUNT}" >> $GITHUB_OUTPUT
          echo "current_date=${CURRENT_DATE}" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.git-check.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add public/rates/

          # 取得更新資訊
          UPDATE_TIME=$(node -p "JSON.parse(require('fs').readFileSync('public/rates/latest.json')).updateTime")
          CURRENCY_COUNT=$(node -p "Object.keys(JSON.parse(require('fs').readFileSync('public/rates/latest.json')).rates).length")
          HISTORY_COUNT=$(ls -1 public/rates/history/*.json 2>/dev/null | wc -l)

          # 檢查上一個 commit 是否也是匯率更新
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B 2>/dev/null || echo "")

          if [[ "$LAST_COMMIT_MSG" == *"chore(rates): update exchange rates"* ]]; then
            echo "📝 Amending previous commit on data branch..."
            git commit --amend -m "chore(rates): update exchange rates - ${UPDATE_TIME}" \
              -m "Updated ${CURRENCY_COUNT} currencies from Taiwan Bank" \
              -m "📊 History: ${HISTORY_COUNT} days preserved (max 30 days)" \
              -m "🤖 Auto-updated on data branch" \
              -m "Source: https://rate.bot.com.tw/xrt"
            git push --force-with-lease origin data
          else
            echo "📝 Creating new commit on data branch..."
            git commit -m "chore(rates): update exchange rates - ${UPDATE_TIME}" \
              -m "Updated ${CURRENCY_COUNT} currencies from Taiwan Bank" \
              -m "📊 History: ${HISTORY_COUNT} days preserved (max 30 days)" \
              -m "🤖 Auto-updated on data branch" \
              -m "Source: https://rate.bot.com.tw/xrt"
            git push origin data
          fi

      - name: Update workflow summary
        if: steps.git-check.outputs.changed == 'true'
        run: |
          echo "# ✅ Exchange rates updated successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Update Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`data\` (isolated from main)" >> $GITHUB_STEP_SUMMARY
          echo "- **Currencies Updated:** $(node -p "Object.keys(JSON.parse(require('fs').readFileSync('public/rates/latest.json')).rates).length")" >> $GITHUB_STEP_SUMMARY
          echo "- **Update Time:** $(node -p "JSON.parse(require('fs').readFileSync('public/rates/latest.json')).updateTime")" >> $GITHUB_STEP_SUMMARY
          echo "- **Historical Files:** $(ls -1 public/rates/history/*.json 2>/dev/null | wc -l) days" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 CDN URLs" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "Latest: https://cdn.jsdelivr.net/gh/haotool/app@data/public/rates/latest.json" >> $GITHUB_STEP_SUMMARY
          echo "History: https://cdn.jsdelivr.net/gh/haotool/app@data/public/rates/history/YYYY-MM-DD.json" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Sample Rates (TWD)" >> $GITHUB_STEP_SUMMARY
          echo "- **USD:** $(node -p "JSON.parse(require('fs').readFileSync('public/rates/latest.json')).rates.USD")" >> $GITHUB_STEP_SUMMARY
          echo "- **EUR:** $(node -p "JSON.parse(require('fs').readFileSync('public/rates/latest.json')).rates.EUR")" >> $GITHUB_STEP_SUMMARY
          echo "- **JPY:** $(node -p "JSON.parse(require('fs').readFileSync('public/rates/latest.json')).rates.JPY")" >> $GITHUB_STEP_SUMMARY
          echo "- **CNY:** $(node -p "JSON.parse(require('fs').readFileSync('public/rates/latest.json')).rates.CNY")" >> $GITHUB_STEP_SUMMARY

      - name: No changes detected
        if: steps.git-check.outputs.changed != 'true'
        run: |
          echo "# ℹ️ No rate changes detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The exchange rates have not changed since the last update." >> $GITHUB_STEP_SUMMARY
